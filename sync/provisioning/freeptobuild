#!/usr/bin/env bash

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


## Define colors:

COL_RESET="\e[0m"
COL_RED="\e[0;31m"
COL_GREEN="\e[0;32m"
COL_YELL="\e[0;33m"

## Identify usable ram:

usable_ram() {
    free -m | awk '/cache:/ { print $4 }'
}

if [ "$(id -u)" != "0" ]; then
    echo "[-] Only root can do that!"
fi

## Load configuration file

if [ -r /etc/freeptobuild.cfg ]; then
    config="/etc/freeptobuild.cfg"
    source $config
else
    SHARE="/vagrant"
    export http_proxy=""
fi

## Define apt-cacher-ng server

if ! [ -z "$PROXY" ]; then
    export http_proxy=$PROXY
fi

## Setting building type:

if [ "$RAM_BUILD" == "yes" ]; then
    # check ram available
    if [ "$(usable_ram)" -lt "$TMPFS_SIZE" ]; then
        echo "[!] Not enough RAM for create a tmpfs workdir. Forcing building on disk"
        BUILD_TYPE="disk"
    else
        BUILD_TYPE="ram"
    fi
elif [ "$RAM_BUILD" == "no" ]; then
    BUILD_TYPE="disk"
else
    # set disk as a default build type
    BUILD_TYPE="disk"
fi

# Define variable:

BASEDIR=${1%/} #strip slash
LOCALE=${2:-it_IT.UTF-8}
TIMEZONE=${3:-Europe/Rome}
KEYMAP=${4:-it}
VARIANT=${5:-${LOCALE}}
DATEFMT='%F_%H.%M'
HEAD=""
imgname=""

if [[ $# -lt 1 ]]; then
	echo "[!] You must fill config\n $0 path locale timezone keymap"
	exit 1
fi
if ! [[ -d $1/.git ]]; then
	echo "[!] Repository does not exist, create it manually"
	exit 1
fi

cd $BASEDIR
test -d $BASEDIR || exit 1

export GIT_WORK_TREE=$BASEDIR
export GIT_DIR=$GIT_WORK_TREE/.git

HEAD=$(git rev-parse HEAD | head -c 6)
builddate=$(date +$DATEFMT)
commitdesc=$(git describe --tags --long)
imgdesc="${builddate}_$commitdesc-$VARIANT"
imgname="${SHARE%/}/$(basename $BASEDIR)/${imgdesc}/${imgdesc}.img"

mkdir -p "${SHARE%/}/$(basename $BASEDIR)/${imgdesc}"

if [[ -n "$(find ${SHARE%/}/ -name "*_$HEAD-$VARIANT.img" -print -quit)" ]]; then
	echo "[-] The img file already exists: "
	ls -l ${SHARE%/}/*_$HEAD-$VARIANT.img
	exit 1
fi

set -e

## Create workdir

if [ "$BUILD_TYPE" == "ram" ]; then
    workdir=$(mktemp -d /tmp/build_$(basename $BASEDIR).XXXXX)
    mount -t tmpfs -o "noatime,size=${TMPFS_SIZE}m,mode=0770" tmpfs "$workdir"
else
    mkdir -p /build
    avail_mega=$(df -BM /build | awk '{ print $4 }' | tail -n1 | sed 's/[^0-9]//g')
    if [ "$avail_mega" -lt 5000 ]; then
        echo "[!] Too few disk space: $avail_mega MB, aborting" >&2
        exit 5
    fi
    workdir=$(mktemp -d /build/build_$(basename $BASEDIR).XXXXX)
fi

## Clone freepto repository in $workdir

rsync -r --links --exclude=.git $BASEDIR/ $workdir/

## Define cleanup 

cleanup()
{
	troubledir="/var/build/trouble"
	mkdir -p "$troubledir"
	if [ -d "$workdir" ]
	then
		echo "[!] Something unexpected happened; you can find everything in $troubledir "
		mv $workdir "$troubledir"
		echo "Debug build in $troubledir/$(basename $workdir)"
	fi
}
trap cleanup EXIT

## Print build info:

echo ""
echo -e "${COL_YELL}================== FREEPTO BUILD INFO =====================${COL_RESET}"
echo ""
echo -e "${COL_GREEN}BUILD TYPE${COL_RESET}: $BUILD_TYPE"
echo -e "${COL_GREEN}HTTP PROXY${COL_RESET}: $PROXY"
echo -e "${COL_GREEN}REPOSITORY${COL_RESET}: $BASEDIR"
echo -e "${COL_GREEN}GIT HEAD${COL_RESET}: $HEAD"
echo -e "${COL_GREEN}GIT DESCRIPTION${COL_RESET}: $imgdesc"
echo -e "${COL_GREEN}IMAGE NAME${COL_RESET}: $imgname"
echo ""
echo -e "${COL_YELL}===========================================================${COL_RESET}"
echo ""

## Confirm settings:

read -r -p "Do you want to continue? [Y/n]" response
case $response in
    [Nn])
        trap EXIT 
        exit 0
        ;;
esac

### {{{ LIVE-BUILD SECTION

clear
cd $workdir/
lb clean > /dev/null

mkdir -p /var/log/freeptobuild

if ! ./freepto-config.sh -l $LOCALE -z $TIMEZONE -k $KEYMAP 2>&1 | tee -a /var/log/freeptobuild/$(basename $BASEDIR).log; then
	echo "[-] ERROR: during lb configuration"
	cd ~
	exit 2
fi

if ! lb build 2>&1 | tee -a /var/log/freeptobuild/$(basename $BASEDIR).log; then
	echo "[-] ERROR: during building"
	cd ~
	exit 3
fi

if ! [ -f binary.img ];
then
	echo "[-] ERROR: img not found"
	cd ~
	exit 4
fi

### }}}

## Post build process:

mv binary.img ${imgname}
mv build.log ${imgname}.log.txt
mv binary.contents ${imgname}.contents.txt
mv chroot.packages.live ${imgname}.packages.txt
sha512sum ${imgname} > ${imgname}.sha512sum.txt
git log -n 20 --decorate=short --stat > ${imgname}.history.txt

cd ~

## Remove old images on $SHARE and remove $workdir directory:

find ${SHARE}/ -type f -name "$(basename $BASEDIR)-*" -mtime +3 -delete
rm -rf $workdir

# vim: set ft=sh:
